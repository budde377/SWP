package guessinggame3;

import java.net.URL;
import java.util.*;
import dk.brics.jwig.*;
import dk.brics.xact.*;
import dk.brics.jwig.persistence.HibernateQuerier;

@URLPattern("guessinggameflow")
public class GuessingGame extends WebApp {

  private GameState game = new GameState();

  XML wrapper = [[
    <html>
      <head><title>The Guessing Game</title></head>
      <body bgcolor="aqua"><[BODY]></body>
    </html>
  ]];

  Random rnd = new Random();
  
  class UserState extends Session {
  
    int number;
    int guesses;
    int lastGuess = -1;
    boolean endGame = false;
    UserState() {
      number = rnd.nextInt(100)+1;
      guesses = 0;
      
    }
    
  }

  public URL start() {
    game.incrementPlays();
    	return makeURL("guess", new UserState());
  }

  public XML guess(final UserState s) { 
  	 XML page =  wrapper.plug("BODY", [[
          <div>Please guess a number between 1 and 100:</div> 	  
          <form method="post" action=[GUESS]>
            <input name="guess" type="text" size="3" maxlength="3"/>
            <input type="submit" value="continue"/>
          </form>
        ]]).plug("GUESS", new SubmitHandler(){
		URL run(int guess){
		     s.guesses++;
		     s.lastGuess = guess;
		     if(guess != s.number){
		     		     update(s);
		     	      return makeURL("guess", s);
		     }
		     s.endGame = true;
		     		     update(s);
		synchronized(game){
			return s.guesses < game.getRecord()?makeURL("hiscore",s):makeURL("gameDone",s);		   
		     }  
		}
	} );
	if(s.lastGuess<0){
		       return page;
	}
	   return page.setContent("/xhtml:html/xhtml:body/xhtml:div", [[
                That is not correct. Try a 
                <b><{(s.lastGuess>s.number)?"lower":"higher"}></b> number:
              ]]);

  }

  public XML hiscore(final UserState s){
	 return wrapper.plug("BODY", [[
	          You got it, using <b><{s.guesses}></b> guesses.<p/>
                  That makes you the new record holder!<p/>
                  Please enter your name for the hi-score list:
                  <form method="post" action=[RECORD]>
                    <input name="name" type="text" size="20"/>
                    <input type="submit" value="continue"/>
                  </form>
                ]]).plug("RECORD", new SubmitHandler() {
                  URL run(String name) {
                    synchronized (game) {
                        game.setRecord(s.guesses, name);
                    }
		    return makeURL("thanks");
                  }
                });

  }

  public XML gameDone(UserState s){

  	 return wrapper.plug("BODY", [[	          
	 	You got it, using <b><{s.guesses}></b> guesses.<p/>
		Thank you for playing this exciting game!]]);
  }

  public XML thanks(){
  	 return wrapper.plug("BODY", [[Thank you for playing this exciting game!]]);
  }
   
  public XML record() { 
    return wrapper.plug("BODY", new XMLProducer(game) {
      XML run() {
        synchronized (game) {
          if (game.getHolder() != null)
            return [[
              In <{game.getPlays()}> plays of this game, 
              the record holder is <b><{game.getHolder()}></b> with 
              <b><{game.getRecord()}></b> guesses.
            ]];
          else
            return [[<{game.getPlays()}> plays started. No players finished yet.]];
        }
      }
    });
  }

  @Priority(PRE_CACHE)
  @URLPattern("hiscore")
  public void checkForWinner(UserState s){
  	if(s.lastGuess != s.number)
	        throw new AccessDeniedException("PLAY THE GAME!");
        next();
  }
  
  public class GameState {

  	private int plays = 0;
  	private String holder = null;
  	private int record = Integer.MAX_VALUE;

  	int getRecord() {
  		return record;
  	}

  	int getPlays() {
  		return plays;
  	}

  	String getHolder() {
  		return holder;
  	}


  	void incrementPlays() {
  		plays++;
  		update(this);
  	}

  	synchronized void setRecord(int guesses, String name) {
  	    setHolder(name);
  	    setRecord(guesses);
  	    update(this);
  	}

  	void setHolder(String holder) {
  		this.holder = holder;
  	}

  	void setRecord(int record) {
  		this.record = record;
  	}
  }
}
